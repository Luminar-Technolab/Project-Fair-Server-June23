

                    Node Js
            ------------------------

    1. JS Runtime Environment + JS Library
    2. Features
        - Exteremely Faster
        - Asynchonous Programming
        - Single threaded with event Loop
        - Highly Scalable
        - Open source
    3. Node js Global Objects
        - It can access anywhere from node js app without exporting/ importing
        - ex: console.log(),setTimeOut(),...
    4. Node js Module System
        - Each file in node js app is considered as seperate Module. To reuse modules we have export and import
        - To import a module: use require('module name') method
        - To export a module : use module.exports / exports keyword
        - Built in modules
            - fs : file System - handling file related events
            - http : generating http request
            - https : generating https request
            - event : generating event
            - crypto : tool like encryption,Hashing etc
            - process : used to provide currently running process information
                - environmental variable : used to store run time values
    5. Node js Packages 
        - used to help solving common problems
        - collection of node_module and package.json
        - install package : npm install package-name
        - create package.json : npm configuaration file for project
        - node_modules folder : used to hold copies of installed packages
        - package-lock.json : to hold version of installed packages
    6. Backend Concepts
        - Client-Server architecture: sending request and response between 2 application
        - API : Application Programming Interface
        - RESTful API : http request with json data
        - CRUD : create , read , update , delete
        - CORS : Cross Origin Resource Shairing

    Express JS
    ----------
    1. Framework for resolving client server app of Node js
    2. create a server folder
    3. create package.json file : use command- npm init -y
    4. Update start command as "start":"node index.js" in scripts of package.json
    5. Install packages
        - Express : npm i express
        - cors : npm i cors
        - dotenv : npm i dotenv
    6. create .env file to hold environmental variables
    7. create .gitignore to add file to ignore while adding to git
    8. create index.js file to define server
        - import dotenv 
        - import express
        - import cors
        - create express server
        - use following in server
            - cors
            - parser for json
        - customise port to listen http request
        - run server app
    9. create Routes folder in server to define routes 
        - create router.js file
            - import express
            - create Router object of express to define path
            - using router object define path
            - to define logic to resolve http request, redirect it to its controller
    10. create controller folder in server to define logic to solve API
        - create Controller.js file 
            - create function to solve request

    Mongoose
    ----------
    1. Nodejs library to communicate MongoDB
    2. install Mongoose: npm install mongoose
    3. create db folder for define db connection using mongoose
        - create a js file to define connectivity
        - import mongoose
        - get connection string from process.env
        - connect MongoDB with node using mongoose
        - import connection js file in index.js file
    4. Schema : schema maps to a MongoDB collection and defines the shape of the documents within that collection.
    5. Model

    Multer : a node.js middleware for handling multipart/form-data, which is primarily used for uploading files.
    --------

    1. 



